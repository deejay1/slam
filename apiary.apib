FORMAT: 1A

# SLAM
Service for storing and calculating SLA for various services

# Group Event
Incoming events

## Event [/event]

+ Model (application/json)
    
    + Body

            {
                "event_type": "trigger",
                "metric": "my.metric",
                "sc_ids": [1, 2],
                "environment": "prod",
                "created": "2014-12-01T02:00:00Z"
            }

    + Schema
    
            {
                "type": "object",
                "title": "SLAM Event",
                "required": false,
                "properties": {
                    "event_type": {
                        "type": "string",
                        "required": true,
                        "oneof": ["trigger", "resolve"],
                        "description": "Type of event (trigger if it starts SLA failure, resolve if it ends if)"
                    },
                    "metric": {
                        "type": "string",
                        "required": true,
                        "description": "Identifier of the metrics"
                    },
                    "sc_ids": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "description": "ID's of services from Service Catalogue"
                    },
                    "created": {
                        "type": "string",
                        "format": "date-time",
                        "required": true,
                        "description": "Date the event was created on the sender"
                    },
                    "environment": {
                        "type": "string",
                        "required": true,
                        "description": "Environment type"
                    },
                }
            }

### Send an Event [POST]
Send an event to either trigger an Incident, add more failing metrics or resolve an Incident. Response will containt a list of updated incidents. 


        
+ Request

    [Event][]

+ Response 201 (application/json)

    + Body

            {
                "event_type": "trigger",
                "created": "2015-06-29T10:00:00+02:00",
                "metric": "boop.desu.desu",
                "sc_ids": "[166]",
                "environment": "test"
            }

+ Response 400 (application/json)


    + Body

            {
                "detail": "Wrong event format"
            }

# Group Incident
Incidents are created from incoming events.

## Incidents Collection [/incident{?service,status,environment}]

+ Model (application/json)

    JSON representation of all incidents
    
    + Body
    
            [{
                "id": 1,
                "failing_metrics": [
                        {
                            "id": "my.metric", 
                            "metric": "text", 
                            "start": "2014-12-01T02:00:00Z", 
                            "end": "2014-12-01T02:10:00Z"
                        }
                    ],
                "service_id": 1,
                "start": "2014-12-01T02:00:00Z",
                "end": "2014-12-01T02:10:00Z",
                "environment": "prod"
            },
            {
                "id": 2,
                "failing_metrics": [
                        {
                            "id": "2", 
                            "metric": "my.metric", 
                            "start": "2014-12-02T02:00:00Z", 
                            "end": "2014-12-02T02:10:00Z"
                        }
                    ],
                "service_id": 1,
                "start": "2014-12-02T02:00:00Z",
                "end": "2014-12-012T02:10:00Z",
                "environment": "prod"
            }]
    
### List all Incidents [GET]
Fetches all incidents

+ Parameters

    + service (optional, integer) ... Numeric service ID for a service from the Service Catalogue, for which to fetch incidents.
    + status  (optional, string) ... Fetch only incident with a given status.
    
        + Values
            + `triggered`
            + `resolved`
            
    + environment = `all` (optional, string) ... Environment (production, development, etc)


+ Response 200

    [Incidents Collection][]

## Incident [/incident/{id}]
A single Incident with all its details by its *id*

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Event to perform action with. Has example value.

+ Model (application/json)

    + Body

            {
                "id": 1,
                "failing_metrics": [
                        {
                            "id": 1, 
                            "metric": "my.metric", 
                            "start": "2014-12-01T02:00:00Z", 
                            "end": "2014-12-01T02:10:00Z"
                        }
                    ],
                "environment": "prod",
                "service_id": 1,
                "start": "2014-12-01T02:00:00Z",
                "end": "2014-12-01T02:10:00Z"
            }

### Retrieve an Incident [GET]
+ Response 200

    [Incident][]

# Group SLA

Endpoints returning data about calculated SLA

## SLA [/sla/{id}{?since,until,environment}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the service for which to calculate SLA (taken from Service Catalogue).
    + since = `<current_day>` (optional, date-time, `2014-01-01`) ... Date in ISO 8601 format since when to calculate the SLA
    + until = `<current_day>` (optional, date-time, `2014-01-31`) ... Date in ISO 8601 format until when to calculate the SLA
    + environment = `prod` (optional, string) ... Environment (production, development, etc)

    
+ Model (application/json)

    + Body
    
            {
                "sla": 99
            }

### Retrieve SLA data [GET]
+ Response 200

    [SLA][]
    
## Predefined SLA periods [/sla/{id}/summary{?environment}]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the service for which to calculate SLA (taken from Service Catalogue).
    + environment = `prod` (optional, string) ... Environment (production, development, etc)

+ Model (application/json)

    + Body
    
            {
                "budget_year": 99,
                "yesterday": 99,
                "current_day": 99,
                "current_quarter": 99,
                "last_30_days": 99,
                "last_365_days": 99
                
            }

### Retrieve predefined SLA [GET]
Retrieves predefined SLA periods for a given service

+ Response 200

    [Predefined SLA periods][]

# Group Technical breaks

Endpoints supporting the technical break s functionality

## Starting a technical break [/technical_break/{id}/start/]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the service for which a technical break mode should be enabled (taken from Service Catalogue)

+ Model (application/json)

    + Body
    
            No body required

### Start a technical break [POST]
+ Response 201

        {
            "detail": "success"
        }

## Ending a technical break [/technical_break/{id}/end/]

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the service for which a technical break mode should be disabled (taken from Service Catalogue)

+ Model (application/json)

    + Body
    
            No body required

### End a technical break [POST]
+ Response 201

        {
            "detail": "success"
        }